import tkinter as tk
from tkinter import ttk
from tkinter import messagebox
import mysql.connector

conexion = mysql.connector.connect(host="localhost", user="root", password="", database="ESCUELA")

def cargar_datos():
    tree.delete(*tree.get_children()) 
    cursor = conexion.cursor()
    cursor.execute("SELECT Alumnos.NOMBRE, Alumnos.APELLIDO, Alumnos.DNI, Carreras.NOMBRE, estadoalumno.NOMBRE FROM Alumnos JOIN Carreras ON Alumnos.IDCARRERA = Carreras.IDCARRERA JOIN EstadoAlumno ON Alumnos.IDESTADOALUMNO = estadoalumno.IDESTADOALUMNO WHERE Alumnos.IDESTADOALUMNO = 1")
    for row in cursor.fetchall():
        tree.insert("", "end", values=row)

def validardni():
    dni= dni_entry.get()
    if len(dni)!=8:
        messagebox.showerror("Error", "El DNI debe tener 8 números.")
    else:
        try:
            int(dni)
            return (dni)
        except:
            messagebox.showerror("Error", "El DNI no debe contener ninguna letras")


def mostrar_alerta(mensaje):
    messagebox.showwarning("Alerta", mensaje)


def cargar_carreras():
    cursor = conexion.cursor()
    cursor.execute("SELECT IDCARRERA, NOMBRE FROM Carreras ORDER BY NOMBRE")
    carreras = cursor.fetchall()
    carrera_combobox['values'] = [row[1] for row in carreras]
    print(carreras)
    return carreras  


def guardar_alumno():
    nombre = nombre_entry.get()
    apellido = apellido_entry.get()
    dni = validardni()
    carrera_nombre = carrera_combobox.get()
    estado_alumno = 1  


    if nombre and apellido and dni and carrera_nombre:
        carreras = cargar_carreras()
        carrera_id = None
        for carrera in carreras:
            if carrera[1] == carrera_nombre:
                carrera_id = carrera[0]
                break

        cursor = conexion.cursor()
        cursor.execute("INSERT INTO Alumnos (NOMBRE, APELLIDO, DNI, IDCARRERA, IDESTADOALUMNO) VALUES (%s, %s, %s, %s, %s)", (nombre, apellido, dni, carrera_id, estado_alumno))#%s seteo de configuracion, cada uno se va a reemplazar por lo que ingresó el usuario en el mismo orden que esta establecido
        conexion.commit()
        cargar_datos()  
        nombre_entry.delete(0, tk.END)
        apellido_entry.delete(0, tk.END)
        dni_entry.delete(0, tk.END)
        carrera_combobox.set("")  
    else:
        mostrar_alerta("Los campos son obligatorios. Todos deben ser completados.")


def guardar_cambios(idalumno):
    cursor = conexion.cursor()
    nombre=nombre_entry.get()
    apellido=apellido_entry.get()
    dni=dni_entry.get()
    carrera=carrera_combobox.get()

    if nombre and apellido and dni and carrera:
        item=tree.item(tree.selection())
        value=item["values"]
        print (value)
        carreras = cargar_carreras()
        carrera_id = None
        for car in carreras:
            if car[1] == carrera:
                carrera_id = car[0]
                break
        cursor.execute("UPDATE alumnos SET NOMBRE=%s, APELLIDO=%s, DNI=%s, IDCARRERA=%s WHERE IDALUMNO = %s",  (nombre,apellido,dni,carrera_id, idalumno))
        conexion.commit()
        cargar_datos()
        messagebox.showinfo("Perfecto","Los cambios se guardaron con exito :)")
        nombre_entry.delete(0, tk.END)
        apellido_entry.delete(0, tk.END)
        dni_entry.delete(0, tk.END)
        carrera_combobox.set("") 
        guardar_button.config(text="Guardar",command=guardar_alumno)

def modificar_alumno():
    cursor = conexion.cursor()
    item=tree.item(tree.selection())
    values=item["values"]
    nombre_entry.delete(0, tk.END)
    nombre_entry.insert(0,values[0])
    apellido_entry.delete(0, tk.END)
    apellido_entry.insert(0,values[1])
    dni_entry.delete(0, tk.END)
    dni_entry.insert(0,values[2])
    carrera_combobox.set("") 
    carrera_combobox.set(values[3])
    cursor.execute("SELECT IDALUMNO, NOMBRE, DNI FROM ALUMNOS")
    idAlumno = 0
    for row in cursor.fetchall():
        if str(values[2]) == row[2]:
            idAlumno = row[0]
    guardar_button.config(text="Guardar Cambios",command=lambda:guardar_cambios(idAlumno))

def eliminar():        
    item=tree.item(tree.selection())
    values=item["values"]
    print (values)
    cursor = conexion.cursor()
    cursor.execute("UPDATE ALUMNOS SET IDESTADOALUMNO=2 WHERE DNI=%s",(str(values[2]),))
    conexion.commit()
    cargar_datos()


root = tk.Tk()
root.resizable(0,0) 
root.configure(bg="azure3")
root.title("Consulta de Alumnos")


formulario_frame = tk.Frame(root, bd=2, relief=tk.SOLID)
formulario_frame.grid(padx=10, pady=10)

titulo_label = tk.Label(formulario_frame, text="Formulario Inscripción", font=("Helvetica", 14))
titulo_label.grid(row=0, column=0, columnspan=2, pady=10)

nombre_label = tk.Label(formulario_frame, text="Nombre:")
nombre_label.grid(row=1, column=0)
nombre_entry = tk.Entry(formulario_frame)
nombre_entry.grid(row=1, column=1, padx=5, pady=5, ipadx=5, ipady=5, sticky="ew")

apellido_label = tk.Label(formulario_frame, text="Apellido:")
apellido_label.grid(row=2, column=0)
apellido_entry = tk.Entry(formulario_frame)
apellido_entry.grid(row=2, column=1, padx=5, pady=5, ipadx=5, ipady=5, sticky="ew")

dni_label = tk.Label(formulario_frame, text="DNI:")
dni_label.grid(row=3, column=0)
dni_entry = tk.Entry(formulario_frame)
dni_entry.grid(row=3, column=1, padx=5, pady=5, ipadx=5, ipady=5, sticky="ew")

carrera_label = tk.Label(formulario_frame, text="Carrera:")
carrera_label.grid(row=4, column=0)
carrera_combobox = ttk.Combobox(formulario_frame,  state="readonly")
carrera_combobox.grid(row=4, column=1, padx=5, pady=5, ipadx=5, ipady=5, sticky="ew")

carreras = cargar_carreras()

guardar_button = tk.Button(formulario_frame, text="Guardar", command=guardar_alumno)
guardar_button.grid(row=5, columnspan=2, pady=10, sticky="ew")


tree = ttk.Treeview(root, columns=("Nombre", "Apellido","DNI", "Carrera", "Estado Alumno"))
tree.heading("#1", text="Nombre")
tree.heading("#2", text="Apellido")
tree.heading("#3", text="DNI")
tree.heading("#4", text="Carrera")
tree.heading("#5", text="Estado Alumno")
tree.column("#0", width=0, stretch=tk.NO) 
tree.grid(padx=10, pady=10)

cargar_button = tk.Button(root, text="Cargar Datos", command=cargar_datos)
cargar_button.grid(column= 0,pady=5)
modificar_button=tk.Button(root, text="Modificar", command=modificar_alumno)
modificar_button.grid(column= 0, pady=5)
eliminar_button=tk.Button(root, text="Eliminar", command=eliminar)
eliminar_button.grid(column= 0 , pady=5)

root.mainloop()
conexion.close()